/*
https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/
 */
package com.codinghacks.java;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

/**
 *
 * @author mattoop
 */
public class ZigZagTraversal {
    public static void main(String[] str) {
        ZigZagTraversal zigZagTraversal = new ZigZagTraversal();
        TreeNode n1 = new TreeNode(2);
        TreeNode n2 = new TreeNode(3);
        TreeNode n3 = new TreeNode(4);
        TreeNode n4 = new TreeNode(5);
        TreeNode inputTree = new TreeNode(1);
        
        add(inputTree, n1, "left");
        add(inputTree, n2, "right");
        add(n1, n3, "left");
        add(n2, n4, "right");
        
        System.out.println(zigZagTraversal.levelOrder(inputTree));
    }
    
    public static void add(TreeNode parent, TreeNode child, String orientation) {
        if (orientation.equals("left")) {
            parent.setLeft(child);
        } else {
            parent.setRight(child);
        }
    }
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return null;
        int depth = 0;
        List<List<Integer>> zigZagLevelList = new ArrayList<>();
        Queue<TreeNode> levelQueue = new ArrayDeque<>();
        levelQueue.add(root);
        boolean order = true;
        
        while(!levelQueue.isEmpty()) {
            depth = levelQueue.size();
            List<Integer> levelList = new ArrayList<>();
            for(int i = 0; i< depth; i++) {
                TreeNode node = levelQueue.poll();
                if(order)
                    levelList.add(0, node.getVal());
                else 
                    levelList.add(node.getVal());    
                 if(node.getRight() != null)
                        levelQueue.add(node.getRight());
                 if(node.getLeft() != null)
                        levelQueue.add(node.getLeft());
                   
            }
            order = order ? false: true;
            zigZagLevelList.add(levelList);
        }
        
        return zigZagLevelList;
    }
}
